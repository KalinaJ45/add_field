# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Add_FieldDialog
                                 A QGIS plugin

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-03-20
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Kalina Juszczyk
        email                : kalina.juszczyk@wp.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from pathlib import Path

from qgis.core import *
from qgis.core import QgsWkbTypes
from qgis.utils import iface
from qgis.PyQt import QtWidgets, uic
from qgis.PyQt.QtWidgets import QFileDialog, QMessageBox
from PyQt5.QtCore import QThread

from .worker import Worker

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Add_Field_dialog_base.ui'))


class Add_FieldDialog(QtWidgets.QDialog, FORM_CLASS):
    """The main plugin class.
    """

    def __init__(self, parent=None):
        """Constructor."""
        super(Add_FieldDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.first_layer = None
        self.second_layer = None
        self.first_temporary_layer = None
        self.second_temporary_layer = None

        self.loadFirstLayerBtn.clicked.connect(self.load_first_layer)
        self.loadSecondLayerBtn.clicked.connect(self.load_second_layer)
        self.assignObjectsBtn.clicked.connect(self.start_worker)
        self.clearFormBtn.clicked.connect(self.clear_form)
        self.closeBtn.clicked.connect(self.close_window_plugin)

    def set_enabled_of_widget(self, enabled_of_widets):
        """Sets if widgets is enabled or not.

        Args:
            enabled_of_widets (dict): dictionary in which the keys are widgets (QtWidgets) and the values are True or False (bool) depending on whether the widget  should be enabled or not.
        """
        for widget in enabled_of_widets:
            widget.setEnabled(enabled_of_widets[widget])

    def clear_widget(self, widgets):
        """Clears selected widges.

        Args:
            widgets (list): list of widgets (QtWidgets).
        """
        for widget in widgets:
            widget.clear()

    def clear_form(self):
        """Clear plugin box.
        """
        self.set_enabled_of_widget({self.selectionLayersGB: True, self.loadFirstLayerBtn: True,
                                   self.loadSecondLayerBtn: False, self.assigningFieldsGB: False})
        self.clear_widget(
            [self.nameOfFirstLayerLE, self.nameOfSecondLayerLE, self.nameOfNewFieldLE, self.listOfFieldsCB])

    def select_shapefile(self, name_of_file_label) -> str or bool:
        """Opens dialog box to selecte shapefile. Its path is sets as label text. In the event of a problem an message appears.

        Args:
            name_of_file_label (QLineEdit): widget with selected shapefile path as text.

        Returns:
            str or bool: Rerurns path of selected shapefile (str) or False (bool) when no file selected.
        """
        selected_shapefile = QFileDialog.getOpenFileName(
            None, "Wybierz plik shp", "", "Shapefile (*.shp)")
        if len(selected_shapefile[0]) > 0:
            name_of_file_label.setText(selected_shapefile[0])
            shapefile = QgsVectorLayer(selected_shapefile[0], Path(
                selected_shapefile[0]).with_suffix('').stem, 'ogr')
            return shapefile
        else:
            msg = QMessageBox.critical(
                None, "Wybierz plik shapefile", "Nie wybrano pliku shapefile!")
            return False

    def create_temporary_layer(self, shapefile) -> QgsVectorLayer:
        """Creates temporary vector layer and ternsforms coordinate reference system to EPSG:2180.

        Args:
            shapefile (QgsVectorLayer): selected shapefile.

        Returns:
            QgsVectorLayer: temporary vector layer.
        """
        crs = QgsCoordinateReferenceSystem("EPSG:2180")
        temporary_layer = QgsVectorLayer('%s?crs=%s' % (QgsWkbTypes.geometryDisplayString(
            shapefile.geometryType()), crs.authid()), 'temp', 'memory')
        provider = temporary_layer.dataProvider()
        provider.addAttributes(shapefile.dataProvider().fields().toList())
        temporary_layer.updateFields()
        coordinateTransformer = QgsCoordinateTransform(
            shapefile.crs(), crs, QgsProject.instance())
        features = []
        for feature in shapefile.getFeatures():
            feat = QgsFeature(feature)
            geom = feat.geometry()
            geom.transform(coordinateTransformer)
            feat.setGeometry(geom)
            features.append(feat)
        provider.addFeatures(features)
        return temporary_layer

    def open_shapefile(self, shapefiles):
        """Opens shapefiles in Qgis project.

        Args:
            shapefiles (list): list of shapefile (QgsVectorLayer).
        """
        for shepefile in shapefiles:
            QgsProject.instance().addMapLayers([shepefile])

    def do_if_is_problem_with_opening_file(self, enabled_of_widet, widgets, textmassage):
        """It does when there is a problem opening the file: sets states of widges, clars widgets and an message appears.

        Args:
            enabled_of_widet (dict): dictionary in which the keys are widgets (QtWidgets) and the values are True or False (bool) depending on whether the widget  should be enabled or not.
            widgets (list): list of widgets (QtWidgets).
            textmassage (str): massage text.
        """
        self.set_enabled_of_widget(enabled_of_widet)
        self.clear_widget(widgets)
        msg = QMessageBox.critical(None, "Wybierz inny shapefile", textmassage)

    def load_first_layer(self):
        """Loads the first selected layer (QgsVectorLayer) to Qgis project.
        """
        self.first_layer = self.select_shapefile(self.nameOfFirstLayerLE)
        if self.first_layer:
            if (type(self.first_layer)) == QgsVectorLayer and self.first_layer.isValid() and self.first_layer.crs().isValid():
                self.first_temporary_layer = self.create_temporary_layer(
                    self.first_layer)
                self.open_shapefile(
                    [self.first_layer,  self.first_temporary_layer])
                self.hide_temporary_layer(self.first_temporary_layer)
                self.set_enabled_of_widget(
                    {self.loadFirstLayerBtn: False, self.loadSecondLayerBtn: True})
            else:
                self.do_if_is_problem_with_opening_file(
                    {self.selectionLayersGB: True, self.loadFirstLayerBtn: True}, [self.nameOfFirstLayerLE], "Problem z ładowaniem Shapefile")

    def load_second_layer(self):
        """Loads the second selected layer (QgsVectorLayer) to Qgis project.
        """
        self.second_layer = self.select_shapefile(self.nameOfSecondLayerLE)
        if self.second_layer:
            if (type(self.second_layer)) == QgsVectorLayer and self.second_layer.isValid() and self.second_layer.crs().isValid():
                names_of_fields = self.get_names_of_layer_fields(
                    self.second_layer)
                if len(names_of_fields) >= 1:
                    self.listOfFieldsCB.addItems(names_of_fields)
                    self.listOfFieldsCB.setCurrentIndex(-1)
                    self.second_temporary_layer = self.create_temporary_layer(
                        self.second_layer)
                    self.open_shapefile(
                        [self.second_layer, self.second_temporary_layer])
                    self.hide_temporary_layer(self.second_temporary_layer)
                    self.set_enabled_of_widget(
                        {self.selectionLayersGB: False, self.assigningFieldsGB: True, self.progressBar: False})
                else:
                    self.do_if_is_problem_with_opening_file({self.selectionLayersGB: True, self.loadSecondLayerBtn: True}, [
                        self.nameOfSecondLayerLE], "Wybrany shapefile nie posiada pól!")
            else:
                self.do_if_is_problem_with_opening_file({self.selectionLayersGB: True, self.loadSecondLayerBtn: True}, [
                    self.nameOfSecondLayerLE], "Problem z ładowaniem Shapefile")

    def hide_temporary_layer(self, layer):
        """Hides layer in Qgis project and in legend.

        Args:
            layer (QgsVectorLayer): temporary vector layer.
        """
        model = iface.layerTreeView().layerTreeModel()
        ltv = iface.layerTreeView()
        root = QgsProject.instance().layerTreeRoot()
        node = root.findLayer(layer.id())
        node.setItemVisibilityChecked(False)
        index = model.node2index(node)
        ltv.setRowHidden(index.row(), index.parent(), True)
        node.setCustomProperty('nodeHidden', 'true')
        ltv.setCurrentIndex(model.node2index(root))

    def get_names_of_layer_fields(self, layer) -> list:
        """Gets names of selected layer fields

        Args:
            layer (QgsVectorLayer): selected vector layer.

        Returns:
            list: list of selected layer fields names (str).
        """
        fields = layer.fields()
        names_of_fields = [field.name() for field in fields]
        return names_of_fields

    def start_worker(self):
        """Method to start the worker thread.
        """
        if self.nameOfNewFieldLE.text() != "" and self.listOfFieldsCB.currentIndex() != -1 and self.nameOfNewFieldLE.text() not in self.get_names_of_layer_fields(self.first_layer):
            self.set_enabled_of_widget({self.progressBar: True, self.listOfFieldsCB: False, self.nameOfNewFieldLE: False,
                                       self.assignObjectsBtn: False, self.clearFormBtn: False, self.closeBtn: False})
            self.progressBar.setValue(0)
            self.thread = QThread()
            self.worker = Worker(self.first_layer, self.first_temporary_layer, self.second_temporary_layer,
                                 self.nameOfNewFieldLE.text(), self.listOfFieldsCB.currentText())
            self.worker.moveToThread(self.thread)
            self.thread.started.connect(self.worker.run)
            self.worker.finished.connect(self.thread.quit)
            self.worker.finished.connect(self.worker.deleteLater)
            self.thread.finished.connect(self.thread.deleteLater)
            self.worker.error.connect(self.error_worker)
            self.worker.progress.connect(self.report_progress)
            self.thread.start()
            self.thread.finished.connect(self.finish_worker)
        elif self.nameOfNewFieldLE.text() == "":
            msg = QMessageBox.critical(
                None, "Nadaj nazwę polu", "Nie nadano nazwy nowemu polu!")
        elif self.listOfFieldsCB.currentIndex() == -1:
            msg = QMessageBox.critical(
                None, "Wybierz pole z listy", "Nie wybrano pola z listy!")
        elif self.nameOfNewFieldLE.text() in self.get_names_of_layer_fields(self.first_layer):
            msg = QMessageBox.critical(
                None, "Nadaj inną nazwę polu", "Warstwa posiada już pole o podanej nazwie!")

    def report_progress(self, n):
        """Method to report the progress to gui.

        Args:
            n (int): step.
        """
        self.progressBar.setValue(n)

    def error_worker(self):
        """Aappears massage and clear plugin form when is worker error.
        """
        msg = QMessageBox.critical(
            None, "Spróbuj jeszcze raz", "Coś poszło nie tak...")
        self.clear_form()

    def finish_worker(self):
        """Does when worker is finish.
        """
        self.commit_changes()
        self.progressBar.setValue(0)
        QgsProject.instance().removeMapLayers(
            [self.first_temporary_layer.id(), self.second_temporary_layer.id()])
        self.set_enabled_of_widget(
            {self.progressBar: False, self.assigningFieldsGB: False, self.clearFormBtn: True, self.closeBtn: True})
        self.clear_form()

    def commit_changes(self):
        """Opens commit changes dialog.
        """
        msg = QMessageBox.question(None, "Zakończ edycję", "Czy zapisać zmiany w warstwie?",
                                   QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel)
        if msg == QMessageBox.Yes:
            self.first_layer.commitChanges()
        if msg == QMessageBox.No:
            self.first_layer.deleteAttribute(
                self.first_layer.fields().indexOf(self.nameOfNewFieldLE.text()))
            self.first_layer.commitChanges()
            self.first_layer.rollBack()

    def close_window_plugin(self):
        """Clear plugin box and closes window plugin.
        """
        self.clear_form()
        self.close()
